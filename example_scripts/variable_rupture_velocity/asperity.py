#!/usr/bin/env python

"""
Simulation: 2D In-plane rupture 
"""
import numpy, SORDlatest, sys
#itstats = 1
#debug = 3

rundir = 'asperity'

dx = 25, 25, 25

np3 = 1,1,1

# dimensions
L = 22000., 10000.

T = 15. 
dt = dx[0] / 12500.0
nt = int( T / dt + 1.5 )
#nt = 3
nn = (
   int( L[0] / dx[0] + 1.5 ),
   int( L[1] / dx[1] + 2.5 ),
   2,
)

# material properties and initial conditions
#ihypo = (nn[0] + 1) / 2+0.5, (nn[1] + 1) / 2, 1.5
ihypo = 1000/dx[0]+1.5,(nn[1] + 1) / 2, 1.5
print ihypo
npml = 20
#ppml = 2
#vpml = 10
faultnormal = 2

# boundary conditions
bc1 = 10, 10, 1 
bc2 = 10, 10, 1

# material properties
hourglass = 1.0, 2.0
_beta=3464
fieldio = [
   ( '=', 'rho', [], 2670.0  ),
   ( '=', 'vp',  [], 6000.0  ),
   ( '=', 'vs',  [], _beta  ),
   ( '=', 'gam', [], 0.1    ),
#   ( '=', 'mco', [], 5e6),
#   ( '=', 'phi', [], 0.75),
]

# initial volume stress input
#ivols = 'yes'
fieldio += [
   ( '=', 'tn',  [], -10e6 ),
#   ( '=r','ts',  [], 'stress.bin'),
   ( '=', 'ts', [],   4e6  ),
]

friction = 'forced'
nstage = 1
vrupstage = 0.9*_beta
sizestage = 20000
rrelax = 250

_i1 = 1000/dx[0]+1,nn[0]-1000/dx[0]
fieldio += [
    ( '=', 'dc',  [],  1e10),
    ( '=', 'mus', [],  1e10),
    ( '=', 'mud', [],  1e10),
    ( '=', 'mud', [_i1,(),()],  0.2),

]
#friction = 'frictionless'
#intype = 'sa'
# Read grid
fieldio += [
#   ( '=r', 'x1',  [],  'x.bin'  ),
#   ( '=r', 'x2',  [],  'y.bin'  ),
#   ( '=r', 'x3',  [],  'z.bin'  ),
]


# nucleation
svtol = 0.001
# nucleation
rcrit = 20000
#trelax = 0.04
#vrup = 0.9*_beta

k = ihypo[1]
fieldio += [
('=w', 'svm', [(),(),1,()],'svm'),
('=w', 'sum', [(),(),1,-1],'sum'),
('=w', 'tsm', [(),(),1,()],'tsm'),
('=w', 'tnm', [(),(),1,()],'tnm'),
#('=w', 'fr', [(),(),1,()],'fr'),
#( '=w', 'v1',  [(),(k+1,-1),1,(1,-1,25)], 'v1'),
#( '=w', 'v2',  [(),(k+1,-1),1,(1,-1,25)], 'v2'),

( '=w', 'area', [(),(),1,()], 'area'),
( '=w', 'x1',  [(),ihypo[1],1,1],'faultx'),
( '=w', 'x2',  [(),ihypo[1],1,1],'faulty'),
( '=w', 'x3',  [(),ihypo[1],1,1],'faultz'),
( '=w', 'mr12',[(),(),1,()], 'mr12'),



#     ( '=w', 'a1',  [(),(k,k+1),1,(1,-1)], 'a1'),
#     ( '=w', 'v1',  [(),(k+1,-1),1,(1,-1)], 'v1'),
#     ( '=w', 'v2',  [(),(k+1,-1),1,(1,-1)], 'v2'),
     
#     ( '=w', 'v1',  [(),k+1,1,(1,-1)], 'v11'),
#     ( '=w', 'v2',  [(),k+1,1,(1,-1)], 'v12'),
     
#     ( '=w', 'v1',  [(),k+2,1,(1,-1)], 'v21'),
#     ( '=w', 'v2',  [(),k+2,1,(1,-1)], 'v22'),
     
     
#     ( '=w', 'v1',  [25,(1,-1),1,(1,-1)], 'vp1'),
     
#     ( '=w', 'v3',  [(),(k+1,-1),1,(1,-1)], 'v3'),
#     ( '=w', 'u1',  [(),(k,k+1),1,(1,-1)], 'u1'),
#     ( '=w', 'a2',  [(),(k,k+1),1,(1,-1)], 'a2'),
#     ( '=w', 'v2',  [(),(k,k+1),1,(1,-1)], 'v2'),
#     ( '=w', 'u2',  [(),(k,k+1),1,(1,-1)], 'u2'),
#     ( '=w', 'a3',  [(),(k,k+1),1,(1,-1)], 'a3'),
#     ( '=w', 'v3',  [(),(k,k+1),1,(1,-1)], 'v3'),
#     ( '=w', 'u3',  [(),(k,k+1),1,(1,-1)], 'u3'), 
#     ( '=r', 'sa1',  [], 'sa1'),
#     ( '=r', 'sa2',  [], 'sa2'),         
#     ( '=w', 'sv1',  [], 'samplesv1'),
#     ( '=w', 'svm',  [(),(),1,()], 'sv'),
#     ( '=w', 'sum',  [(),(),1,()], 'su'),
#     ( '=w', 'sv2',  [], 'sv2'),
#     ( '=w', 'sv3',  [], 'sv3'),
#     ( '=w', 'tsm',  [(),(),1,()], 'ts'),
#     ( '=w', 'ts2',  [], 'ts2'),
#     ( '=w', 'tnm',  [(),(),1,()], 'tn'),
     
#     ( '=w', 'w11',  [(),(k-.5,k+1.5,2),(),()], 's11'),
#     ( '=w', 'w22',  [(),(k-.5,k+1.5,2),(),()], 's22'),
#     ( '=w', 'w12',  [(),(k-.5,k+1.5,2),(),()], 's12'),
     
#     ( '=w', 'e11',  [(),(k-.5,k+1.5,2),(),()], 'e11'),
#     ( '=w', 'e22',  [(),(k-.5,k+1.5,2),(),()], 'e22'),
#     ( '=w', 'e12',  [(),(k-.5,k+1.5,2),(),()], 'e12'),
         
     
#     ( '=w', 'w11',  [(),(k+1.5,-1.5),(),()], 's11+'),
#     ( '=w', 'w22',  [(),(k+1.5,-1.5),(),()], 's22+'),
#     ( '=w', 'w12',  [(),(k+1.5,-1.5),(),()], 's12+'),
 
#     ( '=w', 'w11',  [(),(1.5,k-.5),(),()], 's11-'),
#     ( '=w', 'w22',  [(),(1.5,k-.5),(),()], 's22-'),
#     ( '=w', 'w12',  [(),(1.5,k-.5),(),()], 's12-'),

#     ( '=w', 'e11',  [(),(k+1.5,-1.5),(),()], 'e11+'),
#     ( '=w', 'e22',  [(),(k+1.5,-1.5),(),()], 'e22+'),
#     ( '=w', 'e12',  [(),(k+1.5,-1.5),(),()], 'e12+'),
 
#     ( '=w', 'e11',  [(),(1.5,k-.5),(),()], 'e11-'),
#     ( '=w', 'e22',  [(),(1.5,k-.5),(),()], 'e22-'),
#     ( '=w', 'e12',  [(),(1.5,k-.5),(),()], 'e12-'),         
     
#     ( '=w', 'plcls',[(),(k-0.5,k+1.5,2),1.5,()],'plcls'),
     
          
#     ( '=w', 'ts2',  [], 'samplets2'),
     
#    ( '=w', 'sv3',  [], 'slipr_z'  ),
#    ( '=w', 'su2',  [(),(),801,-1], 'slip_y'),
#    ( '=w', 'su3',  [(),(),801,-1], 'slip_z'),
#    ( '=w', 'x1',  [], 'xx'  ),
#    ( '=w', 'x2',  [], 'yy'  ),
#    ( '=w', 'x3',  [], 'zz'  ), # final horizontal slip
#    ( '=w', 'mus', [], 'mustatic'),
#    ( '=w', 'nhat1',[ihypo[0],(),1,1], 'n_x'),
#    ( '=w', 'nhat2',[ihypo[0],(),1,1], 'n_y'),
#    ( '=w', 'nhat3',[ihypo[0],(),1,1], 'n_z'),
#    ( '=w', 'a2',  [ihypo[0],(),(ihypo[2],ihypo[2]+1),(1,-1,50)],'a2'),
#    ( '=w', 'a3',  [ihypo[0],(),(ihypo[2],ihypo[2]+1),(1,-1,50)],'a3'),
#    ( '=w', 'v2',  [ihypo[0],(),(ihypo[2],ihypo[2]+1),(1,-1,50)],'v2'),
#    ( '=w', 'v3',  [ihypo[0],(),(ihypo[2],ihypo[2]+1),(1,-1,50)],'v3'),
#    ( '=w', 'u2',  [ihypo[0],(),(ihypo[2],ihypo[2]+1),(1,-1,50)],'u2'),
#    ( '=w', 'u3',  [ihypo[0],(),(ihypo[2],ihypo[2]+1),(1,-1,50)],'u3'),
#    ( '=w', 'af',  [], 'af'),
#    ( '=w', 'vw',  [], 'vw'),
#    ( '=w', 'ts1',  [], 'ts1'),
#    ( '=w', 'ts2',  [], 'ts2'),
#    ( '=w', 'ts3',  [], 'ts3'),
#    ( '=w', 'su1',  [], 'su1'),
#    ( '=w', 'su2',  [], 'su2'),
#    ( '=w', 'su3',  [], 'su3'),
#    ( '=w', 'sv1',  [], 'sv1'),
#    ( '=w', 'sv2',  [], 'sv2'),
#    ( '=w', 'sv3',  [], 'sv3'),

]

SORDlatest.run( locals() )

